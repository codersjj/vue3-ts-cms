{
  "compilerOptions": {
    // 目标代码（ts -> js(es5/6/7...)）
    "target": "esnext",
    // 目标代码需要使用的模块化方案（commonjs(require/module.exports)/es module(import/export)）
    "module": "esnext",
    // 是否开启一些严格的检查
    "strict": true,
    // 对 jsx 进行怎么样的处理
    "jsx": "preserve",
    // 辅助的导入功能
    "importHelpers": true,
    // 按照 node 的方式去解析模块
    "moduleResolution": "node",
    // 跳过一些库的类型检测（axios、lodash 等第三方库中的类型）
    "skipLibCheck": true,
    // export default/module.exports = {}
    // es module 和 commonjs 是否可以混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 是否生成映射文件（ts -> js）
    "sourceMap": true,
    // 文件路径在解析时的基本的 url
    "baseUrl": ".",
    // 指定具体要解析使用的类型（默认是 target 选项设置的值）
    "types": ["webpack-env"],
    // 路径解析
    "paths": {
      "@/*": ["src/*"],
      "components/*": ["src/components/*"]
    },
    // 指定在项目中可以使用哪些库中的类型（Proxy/Window/Document...）
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  "exclude": ["node_modules"]
}
